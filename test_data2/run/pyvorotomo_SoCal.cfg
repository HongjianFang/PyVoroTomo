[algorithm]
# Number of iterations to perform.
niter    = 2   
# Number of random realizations per iteration.
nreal    = 50
# Number of Voronoi cells distributed using k-medians clustering.
kvoronoi = 10
# Number of Voronoi cells per realization.
nvoronoi = 990
# 5Horizontal-to-vertical ratio for stretching Voronoi cells
hvr = 4.0
# Depth Varying cells
paretos_alpha = 20
# Should Voronoi cells be generated adaptively?
adaptive_voronoi_cells = True
# Number of events to sample per realization.
nevent = 500
# Number of arrivals per realization.
narrival = 5000
# Threshold for arrivals for each event
min_narrival = 10
# Homogenize raypaths?
homogenize_raypaths = True
# Number of bins per axis for raypath homogenization?
k_medians_npts = 50000
# 
# Multiplicative factor for outlier removal using Tukey fences
# Values 1.5 and 3 indicate "outliers" and "far-off values", respectively.
outlier_removal_factor = 1.5
# The following parameters (atol, btol, maxiter, conlim, and damp) are
# passed through directly to scipy.sparse.linalg.lsmr().
atol = 1e-3
btol = 1e-4
maxiter = 100
conlim = 50
damp = 0.0

[model]
# Velocity model loadable using pykonal.fields.load
initial_pwave_path = ../inputdata/initial_pwave_model.h5
initial_swave_path = ../inputdata/initial_swave_model.h5

[relocate]
# Set the "method" parameter here to "linear" for linearized relocation
# or "de" for differential evolution relocation. The parameters
# controlling the chosen relocation method are set in correspdonging
# sections below.
method = DE

[de_relocation]
# This section is only needed if the "method" parameter of the
# "relocate" section is set to "DE".
depth_min = -1
dlat = 0.1
dlon = 0.1
ddepth = 2
dtime = 0.5

[linearized_relocation]
# This section is only needed if the "method" parameter of the
# "relocate" section is set to "linear".
# 
# All parameters in this section (atol, btol, maxiter, conlim, and damp)
# are passed through directly to scipy.sparse.linalg.lsmr().
atol = 1e-3
btol = 1e-4
conlim = 50
damp = 0.1
maxiter = 10
